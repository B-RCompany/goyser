// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: fumarole.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConsumerGroupType int32

const (
	ConsumerGroupType_STATIC ConsumerGroupType = 0
)

// Enum value maps for ConsumerGroupType.
var (
	ConsumerGroupType_name = map[int32]string{
		0: "STATIC",
	}
	ConsumerGroupType_value = map[string]int32{
		"STATIC": 0,
	}
)

func (x ConsumerGroupType) Enum() *ConsumerGroupType {
	p := new(ConsumerGroupType)
	*p = x
	return p
}

func (x ConsumerGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsumerGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_fumarole_proto_enumTypes[0].Descriptor()
}

func (ConsumerGroupType) Type() protoreflect.EnumType {
	return &file_fumarole_proto_enumTypes[0]
}

func (x ConsumerGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsumerGroupType.Descriptor instead.
func (ConsumerGroupType) EnumDescriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{0}
}

type InitialOffsetPolicy int32

const (
	InitialOffsetPolicy_EARLIEST InitialOffsetPolicy = 0
	InitialOffsetPolicy_LATEST   InitialOffsetPolicy = 1
	InitialOffsetPolicy_SLOT     InitialOffsetPolicy = 2
)

// Enum value maps for InitialOffsetPolicy.
var (
	InitialOffsetPolicy_name = map[int32]string{
		0: "EARLIEST",
		1: "LATEST",
		2: "SLOT",
	}
	InitialOffsetPolicy_value = map[string]int32{
		"EARLIEST": 0,
		"LATEST":   1,
		"SLOT":     2,
	}
)

func (x InitialOffsetPolicy) Enum() *InitialOffsetPolicy {
	p := new(InitialOffsetPolicy)
	*p = x
	return p
}

func (x InitialOffsetPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitialOffsetPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_fumarole_proto_enumTypes[1].Descriptor()
}

func (InitialOffsetPolicy) Type() protoreflect.EnumType {
	return &file_fumarole_proto_enumTypes[1]
}

func (x InitialOffsetPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitialOffsetPolicy.Descriptor instead.
func (InitialOffsetPolicy) EnumDescriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{1}
}

type EventSubscriptionPolicy int32

const (
	EventSubscriptionPolicy_ACCOUNT_UPDATE_ONLY EventSubscriptionPolicy = 0
	EventSubscriptionPolicy_TRANSACTION_ONLY    EventSubscriptionPolicy = 1
	EventSubscriptionPolicy_BOTH                EventSubscriptionPolicy = 2
)

// Enum value maps for EventSubscriptionPolicy.
var (
	EventSubscriptionPolicy_name = map[int32]string{
		0: "ACCOUNT_UPDATE_ONLY",
		1: "TRANSACTION_ONLY",
		2: "BOTH",
	}
	EventSubscriptionPolicy_value = map[string]int32{
		"ACCOUNT_UPDATE_ONLY": 0,
		"TRANSACTION_ONLY":    1,
		"BOTH":                2,
	}
)

func (x EventSubscriptionPolicy) Enum() *EventSubscriptionPolicy {
	p := new(EventSubscriptionPolicy)
	*p = x
	return p
}

func (x EventSubscriptionPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSubscriptionPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_fumarole_proto_enumTypes[2].Descriptor()
}

func (EventSubscriptionPolicy) Type() protoreflect.EnumType {
	return &file_fumarole_proto_enumTypes[2]
}

func (x EventSubscriptionPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSubscriptionPolicy.Descriptor instead.
func (EventSubscriptionPolicy) EnumDescriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{2}
}

type ListAvailableCommitmentLevelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAvailableCommitmentLevelsRequest) Reset() {
	*x = ListAvailableCommitmentLevelsRequest{}
	mi := &file_fumarole_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableCommitmentLevelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableCommitmentLevelsRequest) ProtoMessage() {}

func (x *ListAvailableCommitmentLevelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableCommitmentLevelsRequest.ProtoReflect.Descriptor instead.
func (*ListAvailableCommitmentLevelsRequest) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{0}
}

type ListAvailableCommitmentLevelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitmentLevels []CommitmentLevel `protobuf:"varint,1,rep,packed,name=commitment_levels,json=commitmentLevels,proto3,enum=geyser.CommitmentLevel" json:"commitment_levels,omitempty"`
}

func (x *ListAvailableCommitmentLevelsResponse) Reset() {
	*x = ListAvailableCommitmentLevelsResponse{}
	mi := &file_fumarole_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableCommitmentLevelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableCommitmentLevelsResponse) ProtoMessage() {}

func (x *ListAvailableCommitmentLevelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableCommitmentLevelsResponse.ProtoReflect.Descriptor instead.
func (*ListAvailableCommitmentLevelsResponse) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{1}
}

func (x *ListAvailableCommitmentLevelsResponse) GetCommitmentLevels() []CommitmentLevel {
	if x != nil {
		return x.CommitmentLevels
	}
	return nil
}

type GetConsumerGroupInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupLabel string `protobuf:"bytes,1,opt,name=consumer_group_label,json=consumerGroupLabel,proto3" json:"consumer_group_label,omitempty"`
}

func (x *GetConsumerGroupInfoRequest) Reset() {
	*x = GetConsumerGroupInfoRequest{}
	mi := &file_fumarole_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsumerGroupInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumerGroupInfoRequest) ProtoMessage() {}

func (x *GetConsumerGroupInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumerGroupInfoRequest.ProtoReflect.Descriptor instead.
func (*GetConsumerGroupInfoRequest) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{2}
}

func (x *GetConsumerGroupInfoRequest) GetConsumerGroupLabel() string {
	if x != nil {
		return x.ConsumerGroupLabel
	}
	return ""
}

type DeleteConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupLabel string `protobuf:"bytes,1,opt,name=consumer_group_label,json=consumerGroupLabel,proto3" json:"consumer_group_label,omitempty"`
}

func (x *DeleteConsumerGroupRequest) Reset() {
	*x = DeleteConsumerGroupRequest{}
	mi := &file_fumarole_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConsumerGroupRequest) ProtoMessage() {}

func (x *DeleteConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteConsumerGroupRequest) GetConsumerGroupLabel() string {
	if x != nil {
		return x.ConsumerGroupLabel
	}
	return ""
}

type DeleteConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteConsumerGroupResponse) Reset() {
	*x = DeleteConsumerGroupResponse{}
	mi := &file_fumarole_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConsumerGroupResponse) ProtoMessage() {}

func (x *DeleteConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteConsumerGroupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListConsumerGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConsumerGroupsRequest) Reset() {
	*x = ListConsumerGroupsRequest{}
	mi := &file_fumarole_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConsumerGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumerGroupsRequest) ProtoMessage() {}

func (x *ListConsumerGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumerGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListConsumerGroupsRequest) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{5}
}

type ListConsumerGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroups []*ConsumerGroupInfo `protobuf:"bytes,1,rep,name=consumer_groups,json=consumerGroups,proto3" json:"consumer_groups,omitempty"`
}

func (x *ListConsumerGroupsResponse) Reset() {
	*x = ListConsumerGroupsResponse{}
	mi := &file_fumarole_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConsumerGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumerGroupsResponse) ProtoMessage() {}

func (x *ListConsumerGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumerGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListConsumerGroupsResponse) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{6}
}

func (x *ListConsumerGroupsResponse) GetConsumerGroups() []*ConsumerGroupInfo {
	if x != nil {
		return x.ConsumerGroups
	}
	return nil
}

type ConsumerGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConsumerGroupLabel      string                  `protobuf:"bytes,2,opt,name=consumer_group_label,json=consumerGroupLabel,proto3" json:"consumer_group_label,omitempty"`
	ConsumerGroupType       ConsumerGroupType       `protobuf:"varint,3,opt,name=consumer_group_type,json=consumerGroupType,proto3,enum=fumarole.ConsumerGroupType" json:"consumer_group_type,omitempty"`
	MemberCount             uint32                  `protobuf:"varint,4,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	CommitmentLevel         CommitmentLevel         `protobuf:"varint,5,opt,name=commitment_level,json=commitmentLevel,proto3,enum=geyser.CommitmentLevel" json:"commitment_level,omitempty"`
	EventSubscriptionPolicy EventSubscriptionPolicy `protobuf:"varint,6,opt,name=event_subscription_policy,json=eventSubscriptionPolicy,proto3,enum=fumarole.EventSubscriptionPolicy" json:"event_subscription_policy,omitempty"`
	IsStale                 bool                    `protobuf:"varint,7,opt,name=is_stale,json=isStale,proto3" json:"is_stale,omitempty"`
}

func (x *ConsumerGroupInfo) Reset() {
	*x = ConsumerGroupInfo{}
	mi := &file_fumarole_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerGroupInfo) ProtoMessage() {}

func (x *ConsumerGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerGroupInfo.ProtoReflect.Descriptor instead.
func (*ConsumerGroupInfo) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{7}
}

func (x *ConsumerGroupInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConsumerGroupInfo) GetConsumerGroupLabel() string {
	if x != nil {
		return x.ConsumerGroupLabel
	}
	return ""
}

func (x *ConsumerGroupInfo) GetConsumerGroupType() ConsumerGroupType {
	if x != nil {
		return x.ConsumerGroupType
	}
	return ConsumerGroupType_STATIC
}

func (x *ConsumerGroupInfo) GetMemberCount() uint32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *ConsumerGroupInfo) GetCommitmentLevel() CommitmentLevel {
	if x != nil {
		return x.CommitmentLevel
	}
	return CommitmentLevel_PROCESSED
}

func (x *ConsumerGroupInfo) GetEventSubscriptionPolicy() EventSubscriptionPolicy {
	if x != nil {
		return x.EventSubscriptionPolicy
	}
	return EventSubscriptionPolicy_ACCOUNT_UPDATE_ONLY
}

func (x *ConsumerGroupInfo) GetIsStale() bool {
	if x != nil {
		return x.IsStale
	}
	return false
}

type GetSlotLagInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupLabel string `protobuf:"bytes,1,opt,name=consumer_group_label,json=consumerGroupLabel,proto3" json:"consumer_group_label,omitempty"`
}

func (x *GetSlotLagInfoRequest) Reset() {
	*x = GetSlotLagInfoRequest{}
	mi := &file_fumarole_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSlotLagInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlotLagInfoRequest) ProtoMessage() {}

func (x *GetSlotLagInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlotLagInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSlotLagInfoRequest) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{8}
}

func (x *GetSlotLagInfoRequest) GetConsumerGroupLabel() string {
	if x != nil {
		return x.ConsumerGroupLabel
	}
	return ""
}

type GetSlotLagInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSlotSeen   uint64 `protobuf:"varint,1,opt,name=max_slot_seen,json=maxSlotSeen,proto3" json:"max_slot_seen,omitempty"`
	GlobalMaxSlot uint64 `protobuf:"varint,2,opt,name=global_max_slot,json=globalMaxSlot,proto3" json:"global_max_slot,omitempty"`
}

func (x *GetSlotLagInfoResponse) Reset() {
	*x = GetSlotLagInfoResponse{}
	mi := &file_fumarole_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSlotLagInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlotLagInfoResponse) ProtoMessage() {}

func (x *GetSlotLagInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlotLagInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSlotLagInfoResponse) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{9}
}

func (x *GetSlotLagInfoResponse) GetMaxSlotSeen() uint64 {
	if x != nil {
		return x.MaxSlotSeen
	}
	return 0
}

func (x *GetSlotLagInfoResponse) GetGlobalMaxSlot() uint64 {
	if x != nil {
		return x.GlobalMaxSlot
	}
	return 0
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupLabel string                                         `protobuf:"bytes,1,opt,name=consumer_group_label,json=consumerGroupLabel,proto3" json:"consumer_group_label,omitempty"`
	ConsumerId         *uint32                                        `protobuf:"varint,2,opt,name=consumer_id,json=consumerId,proto3,oneof" json:"consumer_id,omitempty"`
	Accounts           map[string]*SubscribeRequestFilterAccounts     `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Transactions       map[string]*SubscribeRequestFilterTransactions `protobuf:"bytes,4,rep,name=transactions,proto3" json:"transactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_fumarole_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{10}
}

func (x *SubscribeRequest) GetConsumerGroupLabel() string {
	if x != nil {
		return x.ConsumerGroupLabel
	}
	return ""
}

func (x *SubscribeRequest) GetConsumerId() uint32 {
	if x != nil && x.ConsumerId != nil {
		return *x.ConsumerId
	}
	return 0
}

func (x *SubscribeRequest) GetAccounts() map[string]*SubscribeRequestFilterAccounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *SubscribeRequest) GetTransactions() map[string]*SubscribeRequestFilterTransactions {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type CreateStaticConsumerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CreateStaticConsumerGroupResponse) Reset() {
	*x = CreateStaticConsumerGroupResponse{}
	mi := &file_fumarole_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStaticConsumerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticConsumerGroupResponse) ProtoMessage() {}

func (x *CreateStaticConsumerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticConsumerGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateStaticConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{11}
}

func (x *CreateStaticConsumerGroupResponse) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type CreateStaticConsumerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerGroupLabel      string                  `protobuf:"bytes,1,opt,name=consumer_group_label,json=consumerGroupLabel,proto3" json:"consumer_group_label,omitempty"`
	MemberCount             *uint32                 `protobuf:"varint,2,opt,name=member_count,json=memberCount,proto3,oneof" json:"member_count,omitempty"`
	InitialOffsetPolicy     InitialOffsetPolicy     `protobuf:"varint,3,opt,name=initial_offset_policy,json=initialOffsetPolicy,proto3,enum=fumarole.InitialOffsetPolicy" json:"initial_offset_policy,omitempty"`
	CommitmentLevel         CommitmentLevel         `protobuf:"varint,4,opt,name=commitment_level,json=commitmentLevel,proto3,enum=geyser.CommitmentLevel" json:"commitment_level,omitempty"`
	EventSubscriptionPolicy EventSubscriptionPolicy `protobuf:"varint,5,opt,name=event_subscription_policy,json=eventSubscriptionPolicy,proto3,enum=fumarole.EventSubscriptionPolicy" json:"event_subscription_policy,omitempty"`
	AtSlot                  *int64                  `protobuf:"varint,6,opt,name=at_slot,json=atSlot,proto3,oneof" json:"at_slot,omitempty"`
}

func (x *CreateStaticConsumerGroupRequest) Reset() {
	*x = CreateStaticConsumerGroupRequest{}
	mi := &file_fumarole_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStaticConsumerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticConsumerGroupRequest) ProtoMessage() {}

func (x *CreateStaticConsumerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticConsumerGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateStaticConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{12}
}

func (x *CreateStaticConsumerGroupRequest) GetConsumerGroupLabel() string {
	if x != nil {
		return x.ConsumerGroupLabel
	}
	return ""
}

func (x *CreateStaticConsumerGroupRequest) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *CreateStaticConsumerGroupRequest) GetInitialOffsetPolicy() InitialOffsetPolicy {
	if x != nil {
		return x.InitialOffsetPolicy
	}
	return InitialOffsetPolicy_EARLIEST
}

func (x *CreateStaticConsumerGroupRequest) GetCommitmentLevel() CommitmentLevel {
	if x != nil {
		return x.CommitmentLevel
	}
	return CommitmentLevel_PROCESSED
}

func (x *CreateStaticConsumerGroupRequest) GetEventSubscriptionPolicy() EventSubscriptionPolicy {
	if x != nil {
		return x.EventSubscriptionPolicy
	}
	return EventSubscriptionPolicy_ACCOUNT_UPDATE_ONLY
}

func (x *CreateStaticConsumerGroupRequest) GetAtSlot() int64 {
	if x != nil && x.AtSlot != nil {
		return *x.AtSlot
	}
	return 0
}

type GetOldestSlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitmentLevel CommitmentLevel `protobuf:"varint,1,opt,name=commitment_level,json=commitmentLevel,proto3,enum=geyser.CommitmentLevel" json:"commitment_level,omitempty"`
}

func (x *GetOldestSlotRequest) Reset() {
	*x = GetOldestSlotRequest{}
	mi := &file_fumarole_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOldestSlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOldestSlotRequest) ProtoMessage() {}

func (x *GetOldestSlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOldestSlotRequest.ProtoReflect.Descriptor instead.
func (*GetOldestSlotRequest) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{13}
}

func (x *GetOldestSlotRequest) GetCommitmentLevel() CommitmentLevel {
	if x != nil {
		return x.CommitmentLevel
	}
	return CommitmentLevel_PROCESSED
}

type GetOldestSlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot *uint64 `protobuf:"varint,1,opt,name=slot,proto3,oneof" json:"slot,omitempty"`
}

func (x *GetOldestSlotResponse) Reset() {
	*x = GetOldestSlotResponse{}
	mi := &file_fumarole_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOldestSlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOldestSlotResponse) ProtoMessage() {}

func (x *GetOldestSlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fumarole_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOldestSlotResponse.ProtoReflect.Descriptor instead.
func (*GetOldestSlotResponse) Descriptor() ([]byte, []int) {
	return file_fumarole_proto_rawDescGZIP(), []int{14}
}

func (x *GetOldestSlotResponse) GetSlot() uint64 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

var File_fumarole_proto protoreflect.FileDescriptor

var file_fumarole_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x0c, 0x67, 0x65, 0x79, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x6d, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22,
	0x4f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x4e, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x37, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67,
	0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5d, 0x0a, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x75, 0x6d, 0x61,
	0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x17, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x64, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x6c, 0x6f,
	0x74, 0x22, 0xe4, 0x03, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x75, 0x6d,
	0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x63, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6b, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xad, 0x03, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5d,
	0x0a, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a,
	0x07, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x06, 0x61, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x5a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f,
	0x6c, 0x64, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x65, 0x79,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x39, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x65, 0x73,
	0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x2a,
	0x1f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00,
	0x2a, 0x39, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x52, 0x4c, 0x49,
	0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x17, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x02, 0x32,
	0xa1, 0x06, 0x0a, 0x08, 0x46, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x82, 0x01, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2e,
	0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x66, 0x75, 0x6d, 0x61,
	0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x23, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x75, 0x6d,
	0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x66, 0x75, 0x6d, 0x61,
	0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1a, 0x2e,
	0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x65, 0x79, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x66, 0x75, 0x6d,
	0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x75,
	0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x61,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x1e, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x6c, 0x64, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x6c, 0x64, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x77, 0x65, 0x65, 0x61, 0x61, 0x2f, 0x66, 0x75, 0x6d, 0x61, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x67, 0x65, 0x79, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fumarole_proto_rawDescOnce sync.Once
	file_fumarole_proto_rawDescData = file_fumarole_proto_rawDesc
)

func file_fumarole_proto_rawDescGZIP() []byte {
	file_fumarole_proto_rawDescOnce.Do(func() {
		file_fumarole_proto_rawDescData = protoimpl.X.CompressGZIP(file_fumarole_proto_rawDescData)
	})
	return file_fumarole_proto_rawDescData
}

var file_fumarole_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fumarole_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_fumarole_proto_goTypes = []any{
	(ConsumerGroupType)(0),                        // 0: fumarole.ConsumerGroupType
	(InitialOffsetPolicy)(0),                      // 1: fumarole.InitialOffsetPolicy
	(EventSubscriptionPolicy)(0),                  // 2: fumarole.EventSubscriptionPolicy
	(*ListAvailableCommitmentLevelsRequest)(nil),  // 3: fumarole.ListAvailableCommitmentLevelsRequest
	(*ListAvailableCommitmentLevelsResponse)(nil), // 4: fumarole.ListAvailableCommitmentLevelsResponse
	(*GetConsumerGroupInfoRequest)(nil),           // 5: fumarole.GetConsumerGroupInfoRequest
	(*DeleteConsumerGroupRequest)(nil),            // 6: fumarole.DeleteConsumerGroupRequest
	(*DeleteConsumerGroupResponse)(nil),           // 7: fumarole.DeleteConsumerGroupResponse
	(*ListConsumerGroupsRequest)(nil),             // 8: fumarole.ListConsumerGroupsRequest
	(*ListConsumerGroupsResponse)(nil),            // 9: fumarole.ListConsumerGroupsResponse
	(*ConsumerGroupInfo)(nil),                     // 10: fumarole.ConsumerGroupInfo
	(*GetSlotLagInfoRequest)(nil),                 // 11: fumarole.GetSlotLagInfoRequest
	(*GetSlotLagInfoResponse)(nil),                // 12: fumarole.GetSlotLagInfoResponse
	(*SubscribeRequest)(nil),                      // 13: fumarole.SubscribeRequest
	(*CreateStaticConsumerGroupResponse)(nil),     // 14: fumarole.CreateStaticConsumerGroupResponse
	(*CreateStaticConsumerGroupRequest)(nil),      // 15: fumarole.CreateStaticConsumerGroupRequest
	(*GetOldestSlotRequest)(nil),                  // 16: fumarole.GetOldestSlotRequest
	(*GetOldestSlotResponse)(nil),                 // 17: fumarole.GetOldestSlotResponse
	nil,                                           // 18: fumarole.SubscribeRequest.AccountsEntry
	nil,                                           // 19: fumarole.SubscribeRequest.TransactionsEntry
	(CommitmentLevel)(0),                          // 20: geyser.CommitmentLevel
	(*SubscribeRequestFilterAccounts)(nil),        // 21: geyser.SubscribeRequestFilterAccounts
	(*SubscribeRequestFilterTransactions)(nil),    // 22: geyser.SubscribeRequestFilterTransactions
	(*SubscribeUpdate)(nil),                       // 23: geyser.SubscribeUpdate
}
var file_fumarole_proto_depIdxs = []int32{
	20, // 0: fumarole.ListAvailableCommitmentLevelsResponse.commitment_levels:type_name -> geyser.CommitmentLevel
	10, // 1: fumarole.ListConsumerGroupsResponse.consumer_groups:type_name -> fumarole.ConsumerGroupInfo
	0,  // 2: fumarole.ConsumerGroupInfo.consumer_group_type:type_name -> fumarole.ConsumerGroupType
	20, // 3: fumarole.ConsumerGroupInfo.commitment_level:type_name -> geyser.CommitmentLevel
	2,  // 4: fumarole.ConsumerGroupInfo.event_subscription_policy:type_name -> fumarole.EventSubscriptionPolicy
	18, // 5: fumarole.SubscribeRequest.accounts:type_name -> fumarole.SubscribeRequest.AccountsEntry
	19, // 6: fumarole.SubscribeRequest.transactions:type_name -> fumarole.SubscribeRequest.TransactionsEntry
	1,  // 7: fumarole.CreateStaticConsumerGroupRequest.initial_offset_policy:type_name -> fumarole.InitialOffsetPolicy
	20, // 8: fumarole.CreateStaticConsumerGroupRequest.commitment_level:type_name -> geyser.CommitmentLevel
	2,  // 9: fumarole.CreateStaticConsumerGroupRequest.event_subscription_policy:type_name -> fumarole.EventSubscriptionPolicy
	20, // 10: fumarole.GetOldestSlotRequest.commitment_level:type_name -> geyser.CommitmentLevel
	21, // 11: fumarole.SubscribeRequest.AccountsEntry.value:type_name -> geyser.SubscribeRequestFilterAccounts
	22, // 12: fumarole.SubscribeRequest.TransactionsEntry.value:type_name -> geyser.SubscribeRequestFilterTransactions
	3,  // 13: fumarole.Fumarole.ListAvailableCommitmentLevels:input_type -> fumarole.ListAvailableCommitmentLevelsRequest
	5,  // 14: fumarole.Fumarole.GetConsumerGroupInfo:input_type -> fumarole.GetConsumerGroupInfoRequest
	8,  // 15: fumarole.Fumarole.ListConsumerGroups:input_type -> fumarole.ListConsumerGroupsRequest
	6,  // 16: fumarole.Fumarole.DeleteConsumerGroup:input_type -> fumarole.DeleteConsumerGroupRequest
	15, // 17: fumarole.Fumarole.CreateStaticConsumerGroup:input_type -> fumarole.CreateStaticConsumerGroupRequest
	13, // 18: fumarole.Fumarole.Subscribe:input_type -> fumarole.SubscribeRequest
	11, // 19: fumarole.Fumarole.GetSlotLagInfo:input_type -> fumarole.GetSlotLagInfoRequest
	16, // 20: fumarole.Fumarole.GetOldestSlot:input_type -> fumarole.GetOldestSlotRequest
	4,  // 21: fumarole.Fumarole.ListAvailableCommitmentLevels:output_type -> fumarole.ListAvailableCommitmentLevelsResponse
	10, // 22: fumarole.Fumarole.GetConsumerGroupInfo:output_type -> fumarole.ConsumerGroupInfo
	9,  // 23: fumarole.Fumarole.ListConsumerGroups:output_type -> fumarole.ListConsumerGroupsResponse
	7,  // 24: fumarole.Fumarole.DeleteConsumerGroup:output_type -> fumarole.DeleteConsumerGroupResponse
	14, // 25: fumarole.Fumarole.CreateStaticConsumerGroup:output_type -> fumarole.CreateStaticConsumerGroupResponse
	23, // 26: fumarole.Fumarole.Subscribe:output_type -> geyser.SubscribeUpdate
	12, // 27: fumarole.Fumarole.GetSlotLagInfo:output_type -> fumarole.GetSlotLagInfoResponse
	17, // 28: fumarole.Fumarole.GetOldestSlot:output_type -> fumarole.GetOldestSlotResponse
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_fumarole_proto_init() }
func file_fumarole_proto_init() {
	if File_fumarole_proto != nil {
		return
	}
	file_geyser_proto_init()
	file_fumarole_proto_msgTypes[10].OneofWrappers = []any{}
	file_fumarole_proto_msgTypes[12].OneofWrappers = []any{}
	file_fumarole_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fumarole_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fumarole_proto_goTypes,
		DependencyIndexes: file_fumarole_proto_depIdxs,
		EnumInfos:         file_fumarole_proto_enumTypes,
		MessageInfos:      file_fumarole_proto_msgTypes,
	}.Build()
	File_fumarole_proto = out.File
	file_fumarole_proto_rawDesc = nil
	file_fumarole_proto_goTypes = nil
	file_fumarole_proto_depIdxs = nil
}
